#include "DHT.h"
#include <Adafruit_Sensor.h>
#include <ESP8266WiFi.h>

#define WLAN_SSID "WiFi LCS."
#define WLAN_PASS "12345678"

#define HOMEON_CENTRAL_HOST "192.168.43.250"
#define HOMEON_CENTRAL_PORT 1500

#define SERVER_WELCOME_PACKET 0x0001
#define SERVER_PING_PACKET 0x00FE

#define SERVER_REQUEST_LIGHT   0x000B

#define SERVER_REQUEST_TEMP    0x000C
#define SERVER_REQUEST_LDR     0x000D
#define SERVER_REQUEST_MQ2     0x000E
#define SERVER_REQUEST_MQ6     0x000F
#define SERVER_REQUEST_USOLO   0x0010

#define SERVER_SIMPLE_ACTION_PACKET 0x00C8

#define CLIENT_WELCOME_PACKET 0x0001

#define CLIENT_SEND_TEMP    0x000C
#define CLIENT_SEND_LDR     0x000D
#define CLIENT_SEND_MQ2     0x000E
#define CLIENT_SEND_MQ6     0x000F
#define CLIENT_SEND_USOLO   0x0010

#define CLIENT_PONG_PACKET 0x00FE

#define LDR_PIN       A0
#define DHT_PIN       D1
#define BUZZER_PIN    D2
#define LIGHT_PIN     D3
#define MQ2_PIN       D4
#define MQ6_PIN       D5
#define USOLO_PIN     D6

#define DHT_TYPE DHT11
 
DHT dht(DHT_PIN, DHT_TYPE);
WiFiClient client;

uint16_t ESP_ID = 0xAAFF;

float temperaturaAtual, umidadeAtual;
int luminosidadeAtual, mq2Atual, mq6Atual, umidadeSoloAtual;

int digitalReadOutputPin(uint8_t pin)
{
  uint8_t bit = digitalPinToBitMask(pin);
  uint8_t port = digitalPinToPort(pin);
  if (port == NOT_A_PIN)
    return LOW;

  return (*portOutputRegister(port) & bit) ? HIGH : LOW;
}

void setup()
{
  pinMode(BUZZER_PIN, OUTPUT);
  pinMode(LIGHT_PIN,  OUTPUT);
  pinMode(USOLO_PIN,  INPUT);
  pinMode(MQ2_PIN,    INPUT);
  pinMode(MQ6_PIN,    INPUT);
  
  Serial.begin(9600);

  Serial.print("Connecting to ");
  Serial.println(WLAN_SSID);
  
  WiFi.begin(WLAN_SSID, WLAN_PASS);
  
  while (WiFi.status() != WL_CONNECTED) 
  {
    delay(200);
    Serial.print(".");
  }
  
  Serial.println();
  Serial.println("Connected!");
  Serial.println("ESP8266 Network Config ");
  Serial.print("IP - ");
  Serial.println(WiFi.localIP());
  Serial.println();
  Serial.println();

  dht.begin();
}

void loop() 
{
  /*digitalWrite(BUZZER_PIN, HIGH);
  Serial.println("HIGH");
  delay(1000);
  digitalWrite(BUZZER_PIN, LOW);
  Serial.println("LOW");
  delay(1000);*/

  luminosidadeAtual = analogRead(LDR_PIN);
  
  mq2Atual = digitalRead(MQ2_PIN);
  mq6Atual = digitalRead(MQ6_PIN);
  
  umidadeSoloAtual = digitalRead(USOLO_PIN);
  
  umidadeAtual = dht.readHumidity();
  temperaturaAtual = dht.readTemperature();
 
  //Se nÃ£o for um numero retorna erro de leitura
  if (isnan(umidadeAtual) || isnan(temperaturaAtual)) 
  {
    Serial.println("Erro ao ler o sensor!");
    return;
  }
     
  if(!client.connected())
  {
    Serial.print("Connecting to server");
    while (!client.connect(HOMEON_CENTRAL_HOST, HOMEON_CENTRAL_PORT)) 
    {
      delay(500);
      yield();
    }
    Serial.println();
    Serial.print("Conected to IP: ");
    Serial.println(HOMEON_CENTRAL_HOST);

    delay(3000);
    send_welcome_packet();
  }

  delay(1000);

  while(client.connected())
  {
    byte recv_buffer[512];
    int size_buffer = 0;
    
    while(client.available())
    {
      byte response = client.read();
      recv_buffer[size_buffer] = response;
      size_buffer++;
    }

    if(size_buffer > 0)
    {
      byte* packet = new byte[size_buffer];
      memcpy(packet, recv_buffer, size_buffer);

      handle_packet(packet);
    }
  }

  client.stop();

  delay(5000);
}

void handle_packet(byte* packet)
{
  switch(packet[0x0004])
  {
    case SERVER_WELCOME_PACKET:
      //Serial.println("Received a Welcome Back Packet from Server.");
      break;
    case SERVER_PING_PACKET:
      send_pong_packet();
      break;
    case SERVER_SIMPLE_ACTION_PACKET:
      handle_simple_action_packet(packet);
      break;
    case SERVER_REQUEST_LIGHT:
      handle_request_light_switch_action_packet();
      break;
    case SERVER_REQUEST_TEMP:
      handle_request_temp_action_packet();
      break;
    case SERVER_REQUEST_LDR:
      handle_request_ldr_action_packet();
      break;  
    case SERVER_REQUEST_MQ2:
      handle_request_mq2_action_packet();
      break;
    case SERVER_REQUEST_MQ6:
      handle_request_mq6_action_packet();
      break;
    case SERVER_REQUEST_USOLO:
      handle_request_usolo_action_packet();
      break;
    default:
      Serial.print("Received a unknow packet from server ");
      Serial.println(packet[0x04]);
      break;
  }
}

void make_header(uint8_t* packet)
{
  packet[0x00] = (uint8_t)((ESP_ID & 0xFF00) >> 8);
  packet[0x01] = (uint8_t)(ESP_ID & 0x00FF);
  packet[0x02] = 0x00;
  packet[0x03] = 0x00;
}

void send_welcome_packet()
{
  //Serial.println("Sending Welcome Packet to Server");
  uint8_t welcome_packet[0x0005];
  make_header(welcome_packet);
  welcome_packet[0x04] = (uint8_t) CLIENT_WELCOME_PACKET;

  client.write((const uint8_t*)welcome_packet, sizeof(welcome_packet));
  client.flush();
  //Serial.println("Sent!");
}

void send_pong_packet()
{
  uint8_t pong_packet[0x0005];
  make_header(pong_packet);
  pong_packet[0x04] = (uint8_t) CLIENT_PONG_PACKET;

  client.write((const uint8_t*)pong_packet, sizeof(pong_packet));
  client.flush();
}

void handle_simple_action_packet(byte* packet)
{
  Serial.print("Received a simple action packet with value ");
  Serial.println(packet[0x0005]);
}

void handle_request_light_switch_action_packet()
{
  digitalWrite(LIGHT_PIN, !digitalReadOutputPin(outPin));
}

void handle_request_temp_action_packet()
{
  uint8_t temp_packet[0x0007];
  make_header(temp_packet);
  temp_packet[0x04] = (uint8_t) CLIENT_SEND_TEMP;
  temp_packet[0x05] = (uint8_t) temperaturaAtual;
  temp_packet[0x06] = (uint8_t) umidadeAtual;
  
  client.write((const uint8_t*)temp_packet, sizeof(temp_packet));
  client.flush();
}

void handle_request_ldr_action_packet()
{
  uint8_t ldr_packet[0x0006];
  make_header(ldr_packet);
  ldr_packet[0x04] = (uint8_t) CLIENT_SEND_LDR;
  ldr_packet[0x05] = (uint8_t) luminosidadeAtual;
  
  client.write((const uint8_t*)ldr_packet, sizeof(ldr_packet));
  client.flush();
}

void handle_request_mq2_action_packet()
{
  uint8_t mq2_packet[0x0006];
  make_header(mq2_packet);
  mq2_packet[0x04] = (uint8_t) CLIENT_SEND_MQ2;
  mq2_packet[0x05] = (uint8_t) mq2Atual;
  
  client.write((const uint8_t*)mq2_packet, sizeof(mq2_packet));
  client.flush();
}

void handle_request_mq6_action_packet()
{
  uint8_t mq6_packet[0x0006];
  make_header(mq6_packet);
  mq6_packet[0x04] = (uint8_t) CLIENT_SEND_MQ6;
  mq6_packet[0x05] = (uint8_t) mq6Atual;
  
  client.write((const uint8_t*)mq6_packet, sizeof(mq6_packet));
  client.flush();
}

void handle_request_usolo_action_packet()
{
  uint8_t usolo_packet[0x0006];
  make_header(usolo_packet);
  usolo_packet[0x04] = (uint8_t) CLIENT_SEND_USOLO;
  usolo_packet[0x05] = (uint8_t) umidadeSoloAtual;
  
  client.write((const uint8_t*)usolo_packet, sizeof(usolo_packet));
  client.flush();
}
